1) Configurazione PC 

- Installare Windows Subsystem for Linux (WSL). Su una powershell, eseguire il comando {wsl --install} (Windows 11).
- Nel caso di versioni precedenti di Windows, seguire la guida al sito {https://learn.microsoft.com/en-us/windows/wsl/install-manual}.
- Dal prompt dei comandi, eseguire il comando {bash} per aprire una shell wsl.
- Aggiornare i pacchetti della wsl con {sudo apt update && sudo apt upgrade} e isntallare python3 {sudo apt-get install python3} e pip {sudo apt install python3-pip}.
- Creare una repo di progetto
- Navigare nella repo mediante la wsl e creare un ambiente virtuale python col comando {python3 -m venv .venv}. Il percorso della repo di progetto, se creata sul desktop, dovrebbe essere "/mnt/c/Users/{utente}/Desktop/{NomeRepo}".
- Installare i pacchetti python che si trovano nel file requirements.txt {pip install -r requirements.txt}.


2) KEYCLOAK

- Scaricare Docker Desktop al sito {https://docs.docker.com/desktop/setup/install/windows-install/} (l'exe x86_64) ed eseguirlo
- In un terminale all'interno di docker desktop, eseguire il comando: {docker run --name keycloak -p 8080:8080 -e KC_BOOTSTRAP_ADMIN_USERNAME=admin -e KC_BOOTSTRAP_ADMIN_PASSWORD=admin quay.io/keycloak/keycloak:26.0.5 start-dev}.
  In questo modo, si esegue il container di keycloak, mappando la sua porta 8080 con la porta locale 8080. Se si vuole mappare su un altra posrta (ad esempio 8081), bisogna abilitare le connessioni in entrata e in uscita per quel porto,
  mediante Windows Firewall.
- Navigare su localhost:8080 (o al porto scelto) e fare il login inserendo "admin" sia come usernme che come password (o quelle scelte da voi, qualora fossero diverse)
- Creare un nuovo Realm "Example Realm" dalla admin page 
- Creare poi Client, Utenti e Ruoli:
    * Creare un nuovo client di tipo "OpenID Connect" e dargli un id, e.g., "NewClient". Abilitare "Cleint Authentication" e "Authorization" e la tab "Standard Flow". Cos' facendo, si definisce un client (un'app quindi)
      verso il cui ci si deve autenticare, e solo se si è autorizzati si ha la possibilità di accedere alle risrse che mette a disposizione (classico flusso OpenID Connect + OAuth). Infine, associare al client un 
      redirect URI valido (nel mio caso, "http://localhost:5173/callback") e un post-logout URI (nel mio caso, "http://localhost:5173/"). Questi URI dipendono dalla successiva configurazione della web-app.
    * Nel Realm, creare 2 ruoli (e.g., "AdminRole" e "UserRole")
    * Nel Realm, creare 2 utenti (e.g., Admin User e Default User) e le realtive password "adminuser" e "defaultuser", rispettivamente. Mappargli poi i ruoli creati prima.
    * Nella tab "Autrhorization" del client, abilitare la Policy Enforcement Mode di tipo "Enforcing", così da bloccare l'accesso alla risorsa protetta in mancanza di policy.
      Assegarngli poi una risorsa da proteggere (nel mio caso, "http://localhost:5173/admin_page"). L'URI e il porto della rieosrsa dipendono dalla web app.
    * Definire poi policy e permessi per entrambi gli utenti. Le policy "AdminPolicy" e "DefaultPolicy" andranno mappate coi rispettivi ruoli. Credare poi il permesso "AdminPermission" e mapparlo con la giusta policy.
      Così facendo, si definisce una Policy che cede all'utente Admin un Permesso per accedere alla risorsa protetta del client.




3) WEB APP 
- Creare due cartelle, "templates" e "flask_session". La prima conterrà le pagine html, la seconda i dettagli relativi la sessione Flask.
- Creare un file python che definisce il comportamento della web-app:
    * Configurare la sessione Flask (per il salvataggio sul file sistem) e avviarla. Configurare poi il sottosistema di logging
    * Stabilire i dettagli relativi a keycloak, ovvero l'url di base, il nome del realm, l'id e il SEGRETO del clinet di interesse (quest'ultimo reperibile da keycloak) e il redirect uri.
    * Definire poi il comportamento delle varie rotte per il loogin, logout e la risorsa admin protetta.


